//
//Generated by JTB 1.2.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
* All void visitors must implement this interface.
*/
public interface TypeVisitor {
//
// void Auto class visitors
//
public Type visit(NodeList n);
public Type visit(NodeListOptional n);
public Type visit(NodeOptional n);
public Type visit(NodeSequence n);
public Type visit(NodeToken n);

//
// User-generated visitor methods below
//

/**
 * f0 -> MainClass()
 * f1 -> ( ClassDecl() )*
 * f2 -> <EOF>
 */
public Type visit(Program n);

/**
 * f0 -> <CLASS>
 * f1 -> ID()
 * f2 -> <LBRACE>
 * f3 -> <PUBLIC>
 * f4 -> <STATIC>
 * f5 -> <Type>
 * f6 -> <MAIN>
 * f7 -> <LPAREN>
 * f8 -> <STRING>
 * f9 -> <LBRACKET>
 * f10 -> <RBRACKET>
 * f11 -> ID()
 * f12 -> <RPAREN>
 * f13 -> <LBRACE>
 * f14 -> Statement()
 * f15 -> <RBRACE>
 * f16 -> <RBRACE>
 */
public Type visit(MainClass n);

/**
 * f0 -> ClassDeclSimple()
 *       | ClassDeclExtends()
 */
public Type visit(ClassDecl n);

/**
 * f0 -> <CLASS>
 * f1 -> ID()
 * f2 -> <LBRACE>
 * f3 -> ( VarDecl() )*
 * f4 -> ( MethodDecl() )*
 * f5 -> <RBRACE>
 */
public Type visit(ClassDeclSimple n);

/**
 * f0 -> <CLASS>
 * f1 -> ID()
 * f2 -> <EXTENDS>
 * f3 -> ID()
 * f4 -> <LBRACE>
 * f5 -> ( VarDecl() )*
 * f6 -> ( MethodDecl() )*
 * f7 -> <RBRACE>
 */
public Type visit(ClassDeclExtends n);

/**
 * f0 -> Type()
 * f1 -> ID()
 * f2 -> <SEMICOLON>
 */
public Type visit(VarDecl n);

/**
 * f0 -> <PUBLIC>
 * f1 -> Type()
 * f2 -> ID()
 * f3 -> <LPAREN>
 * f4 -> ( FormalList() )*
 * f5 -> <RPAREN>
 * f6 -> <LBRACE>
 * f7 -> ( VarDecl() )*
 * f8 -> ( Statement() )*
 * f9 -> <RETURN>
 * f10 -> Exp()
 * f11 -> <SEMICOLON>
 * f12 -> <RBRACE>
 */
public Type visit(MethodDecl n);

/**
 * f0 -> Type()
 * f1 -> ID()
 * f2 -> ( FormalRest() )*
 */
public Type visit(FormalList n);

/**
 * f0 -> <COMMA>
 * f1 -> Type()
 * f2 -> ID()
 */
public Type visit(FormalRest n);

/**
 * f0 -> IntArrayType()
 *       | BooleanType()
 *       | IntegerType()
 *       | IdentifierType()
 */
public Type visit(Type n);

/**
 * f0 -> <INT>
 * f1 -> <LBRACKET>
 * f2 -> <RBRACKET>
 */
public Type visit(IntArrayType n);

/**
 * f0 -> <BOOLEAN>
 */
public Type visit(BooleanType n);

/**
 * f0 -> <INT>
 */
public Type visit(IntegerType n);

/**
 * f0 -> <IDENTIFIER>
 */
public Type visit(IdentifierType n);

/**
 * f0 -> Block()
 *       | IfStatement()
 *       | WhileStatement()
 *       | StatementPrint()
 *       | Assign()
 *       | ArrayAssign()
 */
public Type visit(Statement n);

/**
 * f0 -> "{"
 * f1 -> StatementList()
 * f2 -> "}"
 */
public Type visit(Block n);

/**
 * f0 -> ( Statement() )*
 */
public Type visit(StatementList n);

/**
 * f0 -> <IF>
 * f1 -> <LPAREN>
 * f2 -> Exp()
 * f3 -> <RPAREN>
 * f4 -> Statement()
 * f5 -> <ELSE>
 * f6 -> Statement()
 */
public Type visit(IfStatement n);

/**
 * f0 -> <WHILE>
 * f1 -> <LPAREN>
 * f2 -> Exp()
 * f3 -> <RPAREN>
 * f4 -> Statement()
 */
public Type visit(WhileStatement n);

/**
 * f0 -> <PRINT>
 * f1 -> <LPAREN>
 * f2 -> Exp()
 * f3 -> <RPAREN>
 * f4 -> <SEMICOLON>
 */
public Type visit(StatementPrint n);

/**
 * f0 -> ID()
 * f1 -> <ASSIGN>
 * f2 -> Exp()
 * f3 -> <SEMICOLON>
 */
public Type visit(Assign n);

/**
 * f0 -> ID()
 * f1 -> <LBRACKET>
 * f2 -> Exp()
 * f3 -> <RBRACKET>
 * f4 -> <ASSIGN>
 * f5 -> Exp()
 * f6 -> <SEMICOLON>
 */
public Type visit(ArrayAssign n);

/**
 * f0 -> ExpFirst()
 * f1 -> ( ExpFirstAdjacent() )*
 */
public Type visit(Exp n);

/**
 * f0 -> <AND>
 * f1 -> ExpFirst()
 */
public Type visit(ExpFirstAdjacent n);

/**
 * f0 -> ExpSecond()
 * f1 -> ( ExpSecondAdjacent() )*
 */
public Type visit(ExpFirst n);

/**
 * f0 -> <LT>
 * f1 -> ExpSecond()
 */
public Type visit(ExpSecondAdjacent n);

/**
 * f0 -> Term()
 * f1 -> ( TermAdjacent() )*
 */
public Type visit(ExpSecond n);

/**
 * f0 -> AddMinus()
 * f1 -> Term()
 */
public Type visit(TermAdjacent n);

/**
 * f0 -> <PLUS>
 *       | <MINUS>
 */
public Type visit(AddMinus n);

/**
 * f0 -> Factor()
 * f1 -> ( FactorAdjacent() )*
 */
public Type visit(Term n);

/**
 * f0 -> <STAR>
 * f1 -> Factor()
 */
public Type visit(FactorAdjacent n);

/**
 * f0 -> Not()
 *       | Elements()
 */
public Type visit(Factor n);

/**
 * f0 -> ( <NOT> )+
 * f1 -> Elements()
 */
public Type visit(Not n);

/**
 * f0 -> TerminalExp()
 * f1 -> ( PostExp() )*
 */
public Type visit(Elements n);

/**
 * f0 -> ArrayLookup()
 *       | Call()
 *       | ArrayLength()
 */
public Type visit(PostExp n);

/**
 * f0 -> <LBRACKET>
 * f1 -> Exp()
 * f2 -> <RBRACKET>
 */
public Type visit(ArrayLookup n);

/**
 * f0 -> <DOT>
 * f1 -> ID()
 * f2 -> <LPAREN>
 * f3 -> [ ExpList() ]
 * f4 -> <RPAREN>
 */
public Type visit(Call n);

/**
 * f0 -> <DOT>
 * f1 -> <LENGTH>
 */
public Type visit(ArrayLength n);

/**
 * f0 -> IntegerLiteral()
 *       | True()
 *       | False()
 *       | IdentifierExp()
 *       | This()
 *       | ParenExp()
 *       | NewArray()
 *       | NewObject()
 */
public Type visit(TerminalExp n);

/**
 * f0 -> <INTEGER_LITERAL>
 */
public Type visit(IntegerLiteral n);

/**
 * f0 -> <TRUE>
 */
public Type visit(True n);

/**
 * f0 -> <FALSE>
 */
public Type visit(False n);

/**
 * f0 -> <IDENTIFIER>
 */
public Type visit(IdentifierExp n);

/**
 * f0 -> <THIS>
 */
public Type visit(This n);

/**
 * f0 -> <LPAREN>
 * f1 -> Exp()
 * f2 -> <RPAREN>
 */
public Type visit(ParenExp n);

/**
 * f0 -> <NEW>
 * f1 -> <INT>
 * f2 -> <LBRACKET>
 * f3 -> Exp()
 * f4 -> <RBRACKET>
 */
public Type visit(NewArray n);

/**
 * f0 -> <NEW>
 * f1 -> ID()
 * f2 -> <LPAREN>
 * f3 -> <RPAREN>
 */
public Type visit(NewObject n);

/**
 * f0 -> Exp()
 * f1 -> ( ExpRest() )*
 */
public Type visit(ExpList n);

/**
 * f0 -> <COMMA>
 * f1 -> Exp()
 */
public Type visit(ExpRest n);

/**
 * f0 -> <IDENTIFIER>
 */
public Type visit(ID n);

}

