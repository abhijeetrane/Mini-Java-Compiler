/* Generated By:JavaCC: Do not edit this line. AbhiLang.java */
import visitor.*;
import syntaxtree.*;
import java.util.Vector;


public class AbhiLang implements AbhiLangConstants {
   public static void main(String[] args)
   {
      AbhiLang parser;
      if ( args.length == 0 )
      {
         System.out.println("AbhiLang Parser:  Reading from standard input . . .");
         parser = new AbhiLang(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("AbhiLang Parser:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new AbhiLang(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("AbhiLang Parser:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("AbhiLang Parser:  Usage is one of:");
            System.out.println("         java AbhiLang < inputfile");
            System.out.println("OR");
            System.out.println("         java AbhiLang inputfile");
            return;
         }
      try
      {
         Program prog = parser.Program();
         System.out.println("AbhiLang Parser: MiniJava program parsed successfully.");
         //PrettyPrintVisitor ptv = new PrettyPrintVisitor();
         //ptv.visit(prog);
         SymbolTableVisitor stv = new SymbolTableVisitor();
         
         //stv.visit(prog);
         prog.accept(stv);
         // System.out.println("The class name is "+(stv.symTable.get("Fac")).getClassName());
         // System.out.println("The class name is "+stv.symTable.get("Fac"));;
         TypeCheckVisitor tcv = new TypeCheckVisitor(stv.symTable);
         prog.accept(tcv);
      }
      catch (ParseException e)
      {
         System.out.println(e.getMessage());
         System.out.println("AbhiLang Parser:  Encountered errors during parse.");
      }
   }

  static final public Program Program() throws ParseException {
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDecl n2;
   NodeToken n3;
   Token n4;

   {
   }
    n0 = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n2 = ClassDecl();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    n4 = jj_consume_token(0);
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Program(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   ID n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   ID n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   Statement n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   {
   }
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ID();
    n4 = jj_consume_token(LBRACE);
                 n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(PUBLIC);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(STATIC);
                 n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(VOID);
                n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(MAIN);
                n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(LPAREN);
                  n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(STRING);
                  n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(LBRACKET);
                    n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(RBRACKET);
                    n19 = JTBToolkit.makeNodeToken(n20);
    n21 = ID();
    n23 = jj_consume_token(RPAREN);
                  n22 = JTBToolkit.makeNodeToken(n23);
    n25 = jj_consume_token(LBRACE);
                  n24 = JTBToolkit.makeNodeToken(n25);
    n26 = Statement();
    n28 = jj_consume_token(RBRACE);
                  n27 = JTBToolkit.makeNodeToken(n28);
    n30 = jj_consume_token(RBRACE);
                  n29 = JTBToolkit.makeNodeToken(n30);
     {if (true) return new MainClass(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n21,n22,n24,n26,n27,n29);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {
   NodeChoice n0;
   ClassDeclSimple n1;
   ClassDeclExtends n2;

   {
   }
    if (jj_2_1(3)) {
      n1 = ClassDeclSimple();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        n2 = ClassDeclExtends();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ClassDecl(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclSimple ClassDeclSimple() throws ParseException {
   NodeToken n0;
   Token n1;
   ID n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   VarDecl n6;
   NodeListOptional n7 = new NodeListOptional();
   MethodDecl n8;
   NodeToken n9;
   Token n10;

   {
   }
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ID();
    n4 = jj_consume_token(LBRACE);
                 n3 = JTBToolkit.makeNodeToken(n4);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n6 = VarDecl();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      n8 = MethodDecl();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    n10 = jj_consume_token(RBRACE);
                  n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ClassDeclSimple(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclExtends ClassDeclExtends() throws ParseException {
   NodeToken n0;
   Token n1;
   ID n2;
   NodeToken n3;
   Token n4;
   ID n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDecl n9;
   NodeListOptional n10 = new NodeListOptional();
   MethodDecl n11;
   NodeToken n12;
   Token n13;

   {
   }
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ID();
    n4 = jj_consume_token(EXTENDS);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ID();
    n7 = jj_consume_token(LBRACE);
                 n6 = JTBToolkit.makeNodeToken(n7);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      n9 = VarDecl();
        n8.addNode(n9);
    }
     n8.nodes.trimToSize();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      n11 = MethodDecl();
        n10.addNode(n11);
    }
     n10.nodes.trimToSize();
    n13 = jj_consume_token(RBRACE);
                  n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new ClassDeclExtends(n0,n2,n3,n5,n6,n8,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDecl() throws ParseException {
   Type n0;
   ID n1;
   NodeToken n2;
   Token n3;

   {
   }
    n0 = Type();
    n1 = ID();
    n3 = jj_consume_token(SEMICOLON);
                    n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new VarDecl(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   ID n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   FormalList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDecl n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;
   Exp n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   {
   }
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = ID();
    n5 = jj_consume_token(LPAREN);
                 n4 = JTBToolkit.makeNodeToken(n5);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      n7 = FormalList();
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    n9 = jj_consume_token(RPAREN);
                 n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(LBRACE);
                  n10 = JTBToolkit.makeNodeToken(n11);
    label_7:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_7;
      }
      n13 = VarDecl();
        n12.addNode(n13);
    }
     n12.nodes.trimToSize();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case PRINT:
      case WHILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_8;
      }
      n15 = Statement();
        n14.addNode(n15);
    }
     n14.nodes.trimToSize();
    n17 = jj_consume_token(RETURN);
                  n16 = JTBToolkit.makeNodeToken(n17);
    n18 = Exp();
    n20 = jj_consume_token(SEMICOLON);
                     n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(RBRACE);
                  n21 = JTBToolkit.makeNodeToken(n22);
     {if (true) return new MethodDecl(n0,n2,n3,n4,n6,n8,n10,n12,n14,n16,n18,n19,n21);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList FormalList() throws ParseException {
   Type n0;
   ID n1;
   NodeListOptional n2 = new NodeListOptional();
   FormalRest n3;

   {
   }
    n0 = Type();
    n1 = ID();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_9;
      }
      n3 = FormalRest();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new FormalList(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalRest FormalRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   ID n3;

   {
   }
    n1 = jj_consume_token(COMMA);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = ID();
     {if (true) return new FormalRest(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
   NodeChoice n0;
   IntArrayType n1;
   BooleanType n2;
   IntegerType n3;
   IdentifierType n4;

   {
   }
    if (jj_2_3(2)) {
      n1 = IntArrayType();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        n2 = BooleanType();
        n0 = new NodeChoice(n2, 1);
        break;
      case INT:
        n3 = IntegerType();
        n0 = new NodeChoice(n3, 2);
        break;
      case IDENTIFIER:
        n4 = IdentifierType();
        n0 = new NodeChoice(n4, 3);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntArrayType IntArrayType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(INT);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LBRACKET);
                   n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RBRACKET);
                   n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new IntArrayType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanType BooleanType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(BOOLEAN);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerType IntegerType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INT);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierType IdentifierType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IdentifierType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   Block n1;
   IfStatement n2;
   WhileStatement n3;
   StatementPrint n4;
   Assign n5;
   ArrayAssign n6;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n1 = Block();
        n0 = new NodeChoice(n1, 0);
      break;
    case IF:
      n2 = IfStatement();
        n0 = new NodeChoice(n2, 1);
      break;
    case WHILE:
      n3 = WhileStatement();
        n0 = new NodeChoice(n3, 2);
      break;
    case PRINT:
      n4 = StatementPrint();
        n0 = new NodeChoice(n4, 3);
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_4(2)) {
        n5 = Assign();
        n0 = new NodeChoice(n5, 4);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          n6 = ArrayAssign();
        n0 = new NodeChoice(n6, 5);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   StatementList n2;
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = StatementList();
    n4 = jj_consume_token(RBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Block(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public StatementList StatementList() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   Statement n1;

   {
   }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case PRINT:
      case WHILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_10;
      }
      n1 = Statement();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new StatementList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeToken n8;
   Token n9;
   Statement n10;

   {
   }
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    n9 = jj_consume_token(ELSE);
               n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Statement();
     {if (true) return new IfStatement(n0,n2,n4,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   {
   }
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new WhileStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public StatementPrint StatementPrint() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(PRINT);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
                    n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new StatementPrint(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public Assign Assign() throws ParseException {
   ID n0;
   NodeToken n1;
   Token n2;
   Exp n3;
   NodeToken n4;
   Token n5;

   {
   }
    n0 = ID();
    n2 = jj_consume_token(ASSIGN);
                 n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Exp();
    n5 = jj_consume_token(SEMICOLON);
                    n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Assign(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAssign ArrayAssign() throws ParseException {
   ID n0;
   NodeToken n1;
   Token n2;
   Exp n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Exp n8;
   NodeToken n9;
   Token n10;

   {
   }
    n0 = ID();
    n2 = jj_consume_token(LBRACKET);
                   n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Exp();
    n5 = jj_consume_token(RBRACKET);
                   n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(ASSIGN);
                 n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Exp();
    n10 = jj_consume_token(SEMICOLON);
                     n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ArrayAssign(n0,n1,n3,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
   ExpFirst n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpFirstAdjacent n2;

   {
   }
    n0 = ExpFirst();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_11;
      }
      n2 = ExpFirstAdjacent();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Exp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpFirstAdjacent ExpFirstAdjacent() throws ParseException {
   NodeToken n0;
   Token n1;
   ExpFirst n2;

   {
   }
    n1 = jj_consume_token(AND);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ExpFirst();
     {if (true) return new ExpFirstAdjacent(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpFirst ExpFirst() throws ParseException {
   ExpSecond n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpSecondAdjacent n2;

   {
   }
    n0 = ExpSecond();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_12;
      }
      n2 = ExpSecondAdjacent();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpFirst(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpSecondAdjacent ExpSecondAdjacent() throws ParseException {
   NodeToken n0;
   Token n1;
   ExpSecond n2;

   {
   }
    n1 = jj_consume_token(LT);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ExpSecond();
     {if (true) return new ExpSecondAdjacent(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpSecond ExpSecond() throws ParseException {
   Term n0;
   NodeListOptional n1 = new NodeListOptional();
   TermAdjacent n2;

   {
   }
    n0 = Term();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_13;
      }
      n2 = TermAdjacent();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpSecond(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public TermAdjacent TermAdjacent() throws ParseException {
   AddMinus n0;
   Term n1;

   {
   }
    n0 = AddMinus();
    n1 = Term();
     {if (true) return new TermAdjacent(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AddMinus AddMinus() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n2 = jj_consume_token(PLUS);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case MINUS:
      n4 = jj_consume_token(MINUS);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AddMinus(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Term Term() throws ParseException {
   Factor n0;
   NodeListOptional n1 = new NodeListOptional();
   FactorAdjacent n2;

   {
   }
    n0 = Factor();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_14;
      }
      n2 = FactorAdjacent();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Term(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public FactorAdjacent FactorAdjacent() throws ParseException {
   NodeToken n0;
   Token n1;
   Factor n2;

   {
   }
    n1 = jj_consume_token(STAR);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Factor();
     {if (true) return new FactorAdjacent(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Factor Factor() throws ParseException {
   NodeChoice n0;
   Not n1;
   Elements n2;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      n1 = Not();
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
    case FALSE:
    case NEW:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      n2 = Elements();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Factor(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Not Not() throws ParseException {
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;
   Elements n3;

   {
   }
    label_15:
    while (true) {
      n2 = jj_consume_token(NOT);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_15;
      }
    }
     n0.nodes.trimToSize();
    n3 = Elements();
     {if (true) return new Not(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Elements Elements() throws ParseException {
   TerminalExp n0;
   NodeListOptional n1 = new NodeListOptional();
   PostExp n2;

   {
   }
    n0 = TerminalExp();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_16;
      }
      n2 = PostExp();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Elements(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PostExp PostExp() throws ParseException {
   NodeChoice n0;
   ArrayLookup n1;
   Call n2;
   ArrayLength n3;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      n1 = ArrayLookup();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[21] = jj_gen;
      if (jj_2_5(2)) {
        n2 = Call();
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          n3 = ArrayLength();
        n0 = new NodeChoice(n3, 2);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new PostExp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayLookup ArrayLookup() throws ParseException {
   NodeToken n0;
   Token n1;
   Exp n2;
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(LBRACKET);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Exp();
    n4 = jj_consume_token(RBRACKET);
                   n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ArrayLookup(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Call Call() throws ParseException {
   NodeToken n0;
   Token n1;
   ID n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   ExpList n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(DOT);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ID();
    n4 = jj_consume_token(LPAREN);
                 n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case NOT:
    case FALSE:
    case NEW:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      n6 = ExpList();
        n5.addNode(n6);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
                 n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Call(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayLength ArrayLength() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
    n1 = jj_consume_token(DOT);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LENGTH);
                 n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ArrayLength(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public TerminalExp TerminalExp() throws ParseException {
   NodeChoice n0;
   IntegerLiteral n1;
   True n2;
   False n3;
   IdentifierExp n4;
   This n5;
   ParenExp n6;
   NewArray n7;
   NewObject n8;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n1 = IntegerLiteral();
        n0 = new NodeChoice(n1, 0);
      break;
    case TRUE:
      n2 = True();
        n0 = new NodeChoice(n2, 1);
      break;
    case FALSE:
      n3 = False();
        n0 = new NodeChoice(n3, 2);
      break;
    case IDENTIFIER:
      n4 = IdentifierExp();
        n0 = new NodeChoice(n4, 3);
      break;
    case THIS:
      n5 = This();
        n0 = new NodeChoice(n5, 4);
      break;
    case LPAREN:
      n6 = ParenExp();
        n0 = new NodeChoice(n6, 5);
      break;
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_6(2)) {
        n7 = NewArray();
        n0 = new NodeChoice(n7, 6);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          n8 = NewObject();
        n0 = new NodeChoice(n8, 7);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new TerminalExp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public True True() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(TRUE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new True(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public False False() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(FALSE);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new False(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierExp IdentifierExp() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IdentifierExp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public This This() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(THIS);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new This(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ParenExp ParenExp() throws ParseException {
   NodeToken n0;
   Token n1;
   Exp n2;
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(LPAREN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Exp();
    n4 = jj_consume_token(RPAREN);
                 n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ParenExp(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public NewArray NewArray() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Exp n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LBRACKET);
                   n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Exp();
    n8 = jj_consume_token(RBRACKET);
                   n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new NewArray(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public NewObject NewObject() throws ParseException {
   NodeToken n0;
   Token n1;
   ID n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ID();
    n4 = jj_consume_token(LPAREN);
                 n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(RPAREN);
                 n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new NewObject(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {
   Exp n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpRest n2;

   {
   }
    n0 = Exp();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_17;
      }
      n2 = ExpRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpRest ExpRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Exp n2;

   {
   }
    n1 = jj_consume_token(COMMA);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Exp();
     {if (true) return new ExpRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ID ID() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ID(n0);}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_23()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    if (jj_3R_30()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public AbhiLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2000000,0x2000000,0x41000000,0x0,0x41000000,0x0,0x41000000,0x20000400,0x8000,0x41000000,0x20000400,0x0,0x20000400,0x80000,0x20000,0x300000,0x300000,0x400000,0x10040100,0x40000,0x11000,0x1000,0x10000,0x10040100,0x10000100,0x0,0x8000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1000,0x4,0x1000,0x4,0x1000,0x1208,0x0,0x1000,0x208,0x1000,0x1208,0x0,0x0,0x0,0x0,0x0,0x18c1,0x0,0x0,0x0,0x0,0x18c1,0x18c0,0x1,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public AbhiLang(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AbhiLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AbhiLang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AbhiLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AbhiLang(AbhiLangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AbhiLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[45];
    for (int i = 0; i < 45; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
